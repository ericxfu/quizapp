{"version":3,"sources":["components/QuestionBox.js","components/Result.js","index.js"],"names":["QuestionBox","question","options","correct","selected","useState","answer","setAnswer","includes","array","splice","Math","floor","random","spliceCorrectAnswer","ClassName","className","map","text","index","key","onClick","Result","score","playAgain","opentdb","require","amount","category","difficulty","type","Quiz","state","questionBank","responses","getQuestions","getTrivia","then","setState","computeAnswer","correct_answer","this","length","incorrect_answers","Component","ReactDOM","render","document","getElementById"],"mappings":"uPAMA,IAmBeA,EAnBK,SAAC,GAA4C,IAA3CC,EAA0C,EAA1CA,SAAUC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,SAAc,EAClCC,mBAASH,GADyB,mBACvDI,EADuD,KAC/CC,EAD+C,KAI9D,OAFKL,EAAQM,SAASL,IANxB,SAA6BM,EAAOH,GAClCG,EAAMC,OAAOC,KAAKC,MAAoB,EAAdD,KAAKE,UAAa,EAAGP,GAM3CQ,CAAoBZ,EAASC,GAE7B,yBAAKY,UAAY,eACf,yBAAKC,UAAU,YAAYf,GAC1BK,EAAOW,KAAI,SAACC,EAAMC,GAAP,OACV,4BAAQC,IAAKD,EAAOH,UAAU,YAAYK,QAAS,WACjDd,EAAU,CAACW,IACXd,EAASc,KAERA,QCPII,EATA,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,UAAT,OACb,yBAAKR,UAAU,eACb,yBAAKA,UAAU,SAAf,cAAmCO,EAAnC,yBACA,4BAAQP,UAAU,UAAUK,QAASG,GAArC,iBCCEC,EAAUC,EAAQ,IAEpBxB,EAAU,CACVyB,OAAQ,EACRC,SAAU,WACVC,WAAY,OACZC,KAAM,YAGJC,E,4MACFC,MAAQ,CACJC,aAAc,GACdV,MAAO,EACPW,UAAW,G,EAEfC,aAAe,WACXV,EAAQW,UAAUlC,GAASmC,MAAK,SAAApC,GAC5B,EAAKqC,SAAS,CACVL,aAAchC,Q,EAO1BuB,UAAY,WACR,EAAKW,eACL,EAAKG,SAAS,CACVf,MAAO,EACPW,UAAW,K,EAGnBK,cAAgB,SAACjC,EAAQkC,GACjBlC,IAAWkC,GACX,EAAKF,SAAS,CACVf,MAAO,EAAKS,MAAMT,MAAQ,IAGlC,EAAKe,SAAS,CACVJ,UAAW,EAAKF,MAAME,UAAY,EAAI,EAAKF,MAAME,UAAY,EAAI,K,kEAhBrEO,KAAKN,iB,+BAmBE,IAAD,OACN,OACI,yBAAKnB,UAAU,aACX,yBAAKA,UAAU,SAAf,eACCyB,KAAKT,MAAMC,aAAaS,OAAS,GAAKD,KAAKT,MAAME,UAAY,GAAKO,KAAKT,MAAMC,aAAahB,KACvF,gBAAEhB,EAAF,EAAEA,SAAUuC,EAAZ,EAAYA,eAAgBG,EAA5B,EAA4BA,kBAA5B,OACI,kBAAC,EAAD,CACA1C,SAAUA,EACVC,QAAWyC,EACXxC,QAAWqC,EACXpC,SAAY,SAAAE,GAAM,OAAI,EAAKiC,cAAcjC,EAAQkC,SAI/B,IAAzBC,KAAKT,MAAME,UAAkB,kBAAC,EAAD,CAAQX,MAASkB,KAAKT,MAAMT,MAAOC,UAAWiB,KAAKjB,YAAgB,U,GA/C9FoB,aAsDnBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.6038acea.chunk.js","sourcesContent":["import React, {useState} from \"react\";\n\nfunction spliceCorrectAnswer(array, answer){\n  array.splice(Math.floor(Math.random()*4), 0, answer);\n}\n\nconst QuestionBox = ({question, options, correct, selected}) => {\n  const [answer, setAnswer] = useState(options);\n  if (!options.includes(correct))\n    spliceCorrectAnswer(options, correct);\n  return (\n    <div ClassName = \"QuestionBox\">\n      <div className=\"question\">{question}</div>\n      {answer.map((text, index) => (\n        <button key={index} className=\"answerBtn\" onClick={() => {\n          setAnswer([text]);\n          selected(text);\n        }}>\n          {text}\n        </button>\n      ))}\n    </div>\n  );\n};\n\nexport default QuestionBox;\n","import React from \"react\";\n\nconst Result = ({score, playAgain}) => (\n  <div className=\"score-board\">\n    <div className=\"score\">You scored {score} / 5 correct answers!</div>\n    <button className=\"playBtn\" onClick={playAgain}>\n      Play again!\n    </button>\n  </div>\n);\n\nexport default Result;\n","import React, {Component} from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./assets/style.css\";\r\nimport QuestionBox from \"./components/QuestionBox\";\r\nimport Result from \"./components/Result\";\r\n\r\nconst opentdb = require('opentdb-api');\r\n \r\nvar options = {\r\n    amount: 5,\r\n    category: 'cartoons',\r\n    difficulty: 'hard',\r\n    type: 'multiple'\r\n}\r\n\r\nclass Quiz extends Component {\r\n    state = {\r\n        questionBank: [],\r\n        score: 0,\r\n        responses: 0\r\n    };\r\n    getQuestions = () => {\r\n        opentdb.getTrivia(options).then(question => {\r\n            this.setState({\r\n                questionBank: question\r\n            });\r\n          });\r\n    };\r\n    componentDidMount(){\r\n        this.getQuestions();\r\n    }\r\n    playAgain = () => {\r\n        this.getQuestions();\r\n        this.setState({\r\n            score: 0,\r\n            responses: 0,\r\n        });\r\n    };\r\n    computeAnswer = (answer, correct_answer) => {\r\n        if (answer === correct_answer) {\r\n            this.setState({\r\n                score: this.state.score + 1\r\n            });\r\n        }\r\n        this.setState({\r\n            responses: this.state.responses < 5 ? this.state.responses + 1 : 5\r\n        });\r\n    };\r\n    render () {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"title\">Trivia Quiz</div>\r\n                {this.state.questionBank.length > 0 && this.state.responses < 5 && this.state.questionBank.map(\r\n                    ({question, correct_answer, incorrect_answers}) => (\r\n                        <QuestionBox \r\n                        question={question}\r\n                        options = {incorrect_answers}\r\n                        correct = {correct_answer}\r\n                        selected = {answer => this.computeAnswer(answer, correct_answer)}\r\n                        ></QuestionBox>\r\n                    ))}\r\n\r\n                {this.state.responses === 5? (<Result score = {this.state.score} playAgain={this.playAgain}/>) : null}\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nReactDOM.render(<Quiz/>, document.getElementById(\"root\"));"],"sourceRoot":""}